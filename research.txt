A quote attributed to John Reynolds states: "Semanticists should be the obstetricians of programming languages, not the coroners." This sentiment resonates deeply with me as a computer scientist drawn to the theory of programming languages. It captures the aspiration to uncover the fundamental structures underlying computation and to use that understanding to guide the design of new programming languages or enhance existing ones—while also enabling more effective program verification.

From the beginning of my career, my fascination has extended beyond structural aspects to include the efficiency of programs and the inherent complexity of computational problems. More broadly, computation can be studied through quantitative techniques, which help us capture dimensions not purely logical in nature—for example, performance metrics or the probabilistic correctness of randomized algorithms.

How can these two perspectives be reconciled? How can we design mathematical frameworks that interpret programs while also accounting for quantitative properties, without sacrificing simplicity or compositionality? These questions lie at the heart of my current research and, in various forms, have shaped much of my work in recent years.